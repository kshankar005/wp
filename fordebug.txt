create or replace PROCEDURE     SP_CRT_BUSNSS_RULES_CHK_SHASHI (PRCSSNG_DT VARCHAR2, NO_OF_REPROC_DAYS NUMBER, CALLING_PRG VARCHAR2, SRC_SYS_ID VARCHAR2)
AS
    V_STMT VARCHAR2(5000);
    V_SRC_SYS_ID Varchar2(10) := SRC_SYS_ID;
    V_REC_STA VARCHAR2(50) := 'SYSTEM APPROVED';
    V_REC_STA_NEW VARCHAR2(50) := 'PENDING CORRECTION';
    V_ERR_FLG VARCHAR2(5) := 'E';
    V_PRCSSNG_DT DATE := TO_DATE(PRCSSNG_DT,'DD-MON-YYYY');
    V_NO_OF_REPROC_DAYS NUMBER := NO_OF_REPROC_DAYS;
    V_COLUMN_NAME VARCHAR2(20);
    V_TABLE_NAME VARCHAR2(50);
    V_WHERE_CLAUSE VARCHAR2(500);
    V_TRGT_WHERE_CLAUSE VARCHAR2(500);
    V_JOB_NME VARCHAR2(50) := 'SP_BUSNS_RULES_CHK' ;
    v_JOB_ID  number := TO_CHAR(SYSDATE,'YYYYMMDDHHMISS');
    V_IN_NOT_IN VARCHAR2(20);
    V_COUNT NUMBER(5);
    V_ERROR VARCHAR2(100);
    CURSOR C1 IS SELECT * FROM FDP.XREF_DQ_RULES WHERE SUBSTR(RULE_SHORT_NAME,3,2) = 'CH' AND IS_ACTIVE_FLG = 'Y' AND RULE_TYPE IN ('LOOKUP','LOOKUP VALUES') ORDER BY SUBSTR(RULE_SHORT_NAME,5,1) DESC;
              PROCEDURE DB_LOG_ENTRY (V_JOB_RUN_ID NUMBER, V_PROC_NME VARCHAR2, V_STEP_NUM NUMBER, V_STEP_DESC VARCHAR2, V_EXEC_TS DATE) AS
               PRAGMA AUTONOMOUS_TRANSACTION;
               BEGIN
                              INSERT INTO FDP.DB_LOG_STA_TBL VALUES (V_JOB_RUN_ID,V_PROC_NME,V_STEP_NUM,V_STEP_DESC,V_EXEC_TS);
                              COMMIT;
               END DB_LOG_ENTRY; 
BEGIN
    If CALLING_PRG = 'ETL' 
    THEN
        DBMS_OUTPUT.PUT_LINE('STEP 1: PROCEDURE STARTED');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',1,'PROCEDURE STARTED',SYSDATE);
    --------------Truncating the Temp table----------------
        V_STMT := 'TRUNCATE TABLE FDP.TMP_CRT_EVNT_BASED_TR';
        EXECUTE IMMEDIATE V_STMT;
        DBMS_OUTPUT.PUT_LINE('STEP 2: TRUNCATE TABLE TMP_CRT_EVNT_BASED_TR COMPLETED');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',2,'TRUNCATE TABLE TMP_CRT_EVNT_BASED_TR COMPLETED',SYSDATE);
    --------------Inserting data in the Temp table----------------
        V_STMT := 'INSERT INTO FDP.TMP_CRT_EVNT_BASED_TR (BUSNSS_HK, ENTY_ID, SRC_SYS_ID, PRCSSNG_DT, BILL_ID, BILL_DT, BILL_CMPL_DT, BILL_RPT_MO, BILL_CYC_CDE, BILL_STA, SRC_CST_CNTR, SRV_CDE, SRV_TYP_CDE, SRV_SUBTYP_CDE, SRV_GRP_CDE, PRD_GRP_LVL1_CDE, PRD_GRP_LVL2_CDE, ACCT_TYP, CUST_ID, FT_ID, SLS_TR_CNT, MNTRY_AMT, OVRD_FLG_VAL, OVRD_MIN_FEE, SLS_TAX_FLG, INV_PRNT_FLG, SLS_VOL, RTRN_AMT, RTRN_TR_CNT, INTRCHG_RVNU_AMT, ADJ_TYP, ADJ_AMT, ADJ_DT, INTRCHG_VOL, INTRCHG_EXP, SLS_TAX, CNTY_TAX, CITY_TAX, DIST_TAX, AREA_TAX_ID, JE_CATEGORY, BILL_BY_SRCHRG_EVNT_VOL, BILL_BY_SRCHRG_TR_CNT, BILL_BY_TR_CNT, BILL_BY_PRCNT_VOL, NTWK_ID, FEE_TYP, CURNCY_CDE, CNVRSN_DT, CNVRSN_RT, FUTR1, FUTR2, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, REC_STA, ERR_FLG, ERR_CDE, GL_EXCL_FLG, SENT_TO_BDA_FLG, FINCL_TR_HK, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, FI_FLG, GL_REV_BNK_NUM, CRD_TYP, CHRG_TYP, ASSMNT_BILLED_AMT, TES_REV_AMT, ROUNDING_REV, PRCSSNG_FEE_PRCT_VOL, PRCSSNG_FEE_UNIT_TR, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY) SELECT BUSNSS_HK, ENTY_ID, SRC_SYS_ID, PRCSSNG_DT, BILL_ID, BILL_DT, BILL_CMPL_DT, BILL_RPT_MO, BILL_CYC_CDE, BILL_STA, SRC_CST_CNTR, SRV_CDE, SRV_TYP_CDE, SRV_SUBTYP_CDE, SRV_GRP_CDE, PRD_GRP_LVL1_CDE, PRD_GRP_LVL2_CDE, ACCT_TYP, CUST_ID, FT_ID, SLS_TR_CNT, MNTRY_AMT, OVRD_FLG_VAL, OVRD_MIN_FEE, SLS_TAX_FLG, INV_PRNT_FLG, SLS_VOL, RTRN_AMT, RTRN_TR_CNT, INTRCHG_RVNU_AMT, ADJ_TYP, ADJ_AMT, ADJ_DT, INTRCHG_VOL, INTRCHG_EXP, SLS_TAX, CNTY_TAX, CITY_TAX, DIST_TAX, AREA_TAX_ID, JE_CATEGORY, BILL_BY_SRCHRG_EVNT_VOL, BILL_BY_SRCHRG_TR_CNT, BILL_BY_TR_CNT, BILL_BY_PRCNT_VOL, NTWK_ID, FEE_TYP, CURNCY_CDE, CNVRSN_DT, CNVRSN_RT, FUTR1, FUTR2, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, REC_STA, ERR_FLG, ERR_CDE, GL_EXCL_FLG, SENT_TO_BDA_FLG, FINCL_TR_HK, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, FI_FLG, GL_REV_BNK_NUM, CRD_TYP, CHRG_TYP, ASSMNT_BILLED_AMT, TES_REV_AMT, ROUNDING_REV, PRCSSNG_FEE_PRCT_VOL, PRCSSNG_FEE_UNIT_TR, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY FROM FDP.CRT_EVNT_BASED_TR WHERE REC_STA = :S AND PRCSSNG_DT > :G' || '-' || V_NO_OF_REPROC_DAYS || ' and PRCSSNG_DT < :G and SRC_SYS_ID = :H ';
        EXECUTE IMMEDIATE V_STMT USING V_REC_STA_NEW, V_PRCSSNG_DT, V_PRCSSNG_DT, V_SRC_SYS_ID;
        V_STMT := 'UPDATE FDP.TMP_CRT_EVNT_BASED_TR SET REC_STA = :A, ERR_CDE = NULL, ERR_FLG = :B';
        EXECUTE IMMEDIATE V_STMT USING V_REC_STA,'C';
        V_STMT := 'INSERT INTO FDP.TMP_CRT_EVNT_BASED_TR (BUSNSS_HK, ENTY_ID, SRC_SYS_ID, PRCSSNG_DT, BILL_ID, BILL_DT, BILL_CMPL_DT, BILL_RPT_MO, BILL_CYC_CDE, BILL_STA, SRC_CST_CNTR, SRV_CDE, SRV_TYP_CDE, SRV_SUBTYP_CDE, SRV_GRP_CDE, PRD_GRP_LVL1_CDE, PRD_GRP_LVL2_CDE, ACCT_TYP, CUST_ID, FT_ID, SLS_TR_CNT, MNTRY_AMT, OVRD_FLG_VAL, OVRD_MIN_FEE, SLS_TAX_FLG, INV_PRNT_FLG, SLS_VOL, RTRN_AMT, RTRN_TR_CNT, INTRCHG_RVNU_AMT, ADJ_TYP, ADJ_AMT, ADJ_DT, INTRCHG_VOL, INTRCHG_EXP, SLS_TAX, CNTY_TAX, CITY_TAX, DIST_TAX, AREA_TAX_ID, JE_CATEGORY, BILL_BY_SRCHRG_EVNT_VOL, BILL_BY_SRCHRG_TR_CNT, BILL_BY_TR_CNT, BILL_BY_PRCNT_VOL, NTWK_ID, FEE_TYP, CURNCY_CDE, CNVRSN_DT, CNVRSN_RT, FUTR1, FUTR2, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, REC_STA, ERR_FLG, ERR_CDE, GL_EXCL_FLG, SENT_TO_BDA_FLG, FINCL_TR_HK, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, FI_FLG, GL_REV_BNK_NUM, CRD_TYP, CHRG_TYP, ASSMNT_BILLED_AMT, TES_REV_AMT, ROUNDING_REV, PRCSSNG_FEE_PRCT_VOL, PRCSSNG_FEE_UNIT_TR, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY) SELECT BUSNSS_HK, ENTY_ID, SRC_SYS_ID, PRCSSNG_DT, BILL_ID, BILL_DT, BILL_CMPL_DT, BILL_RPT_MO, BILL_CYC_CDE, BILL_STA, SRC_CST_CNTR, SRV_CDE, SRV_TYP_CDE, SRV_SUBTYP_CDE, SRV_GRP_CDE, PRD_GRP_LVL1_CDE, PRD_GRP_LVL2_CDE, ACCT_TYP, CUST_ID, FT_ID, SLS_TR_CNT, MNTRY_AMT, OVRD_FLG_VAL, OVRD_MIN_FEE, SLS_TAX_FLG, INV_PRNT_FLG, SLS_VOL, RTRN_AMT, RTRN_TR_CNT, INTRCHG_RVNU_AMT, ADJ_TYP, ADJ_AMT, ADJ_DT, INTRCHG_VOL, INTRCHG_EXP, SLS_TAX, CNTY_TAX, CITY_TAX, DIST_TAX, AREA_TAX_ID, JE_CATEGORY, BILL_BY_SRCHRG_EVNT_VOL, BILL_BY_SRCHRG_TR_CNT, BILL_BY_TR_CNT, BILL_BY_PRCNT_VOL, NTWK_ID, FEE_TYP, CURNCY_CDE, CNVRSN_DT, CNVRSN_RT, FUTR1, FUTR2, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, REC_STA, ERR_FLG, ERR_CDE, GL_EXCL_FLG, SENT_TO_BDA_FLG, FINCL_TR_HK, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, FI_FLG, GL_REV_BNK_NUM, CRD_TYP, CHRG_TYP, ASSMNT_BILLED_AMT, TES_REV_AMT, ROUNDING_REV, PRCSSNG_FEE_PRCT_VOL, PRCSSNG_FEE_UNIT_TR, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY FROM FDP.CRT_EVNT_BASED_TR WHERE REC_STA = :S AND PRCSSNG_DT = :G and SRC_SYS_ID = :H ' ;
        EXECUTE IMMEDIATE V_STMT USING V_REC_STA,V_PRCSSNG_DT, V_SRC_SYS_ID;
        DBMS_OUTPUT.PUT_LINE('STEP 3: INSERTED TEMP TABLE WITH SYSTEM APPROVE AND PENDING RECORDS');
       DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',3,'INSERTED TEMP TABLE WITH SYSTEM APPROVE AND PENDING RECORDS',SYSDATE);
    --------------------Updating error code in the temp table for Lookup errors-----------------------
        FOR V_REC IN C1
        LOOP
            V_TABLE_NAME := REGEXP_SUBSTR (V_REC.RULE_ADDNL_INFO, '[^||]+', 1, 1);
            V_COLUMN_NAME := REGEXP_SUBSTR (V_REC.RULE_ADDNL_INFO, '[^||]+', 1, 2);
            V_WHERE_CLAUSE := NVL(V_REC.LKP_ADDNL_FILTER_CLAUSE,'');
            V_TRGT_WHERE_CLAUSE := NVL(V_REC.TRGT_ADDNL_FILTER_CLAUSE,'');
            V_ERR_FLG := SUBSTR(V_REC.RULE_SHORT_NAME,5,1);
            If V_ERR_FLG = 'E'
            THEN
                V_REC_STA_NEW := 'PENDING CORRECTION';
            ELSIF V_ERR_FLG = 'W'
            THEN
                V_REC_STA_NEW := 'SYSTEM APPROVED';
            END IF;

            IF V_REC.RULE_TYPE = 'LOOKUP'
            THEN
                V_IN_NOT_IN := 'NOT IN';
            ELSIF V_REC.RULE_TYPE = 'LOOKUP VALUES'
            THEN
               V_IN_NOT_IN := 'IN';
            END IF;
            V_STMT := 'UPDATE FDP.TMP_CRT_EVNT_BASED_TR SET ERR_CDE = ERR_CDE ||' || TO_CHAR(V_REC.RULE_ID) || '|| :A ,
            REC_STA = :S, ERR_FLG = :F, LS_UPDT_BY_NME = USER, LS_UPDT_DT = CURRENT_DATE , JOB_NME = :G
            WHERE SRC_SYS_ID = :H AND ' || V_REC.COLUMN_NAME || ' ' || V_IN_NOT_IN || ' (SELECT ' || V_COLUMN_NAME || ' FROM ' || V_TABLE_NAME || ' ' || V_WHERE_CLAUSE  || ') ' || V_TRGT_WHERE_CLAUSE;
            DBMS_OUTPUT.PUT_LINE(V_STMT);
            EXECUTE IMMEDIATE V_STMT USING '|', V_REC_STA_NEW, V_ERR_FLG, V_JOB_NME, V_SRC_SYS_ID  ;
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('STEP 4: UPDATED RECORDS IN TMP_CRT_EVNT_BASED_TR FOR LOOKUP ERRORS');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',4,'UPDATED RECORDS IN TMP_CRT_EVNT_BASED_TR FOR LOOKUP ERRORS',SYSDATE);
--        V_STMT := 'INSERT INTO FDP.XREF_EVNT_REFNCE (SRC_SYS_ID, SRV_CDE, EFF_STRT_DT, EFF_END_DT, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, GL_EXCL_FLG) SELECT DISTINCT :A as SRC_SYS_ID, TRIM(A.SRV_CDE),:B AS EFF_STRT_DT, :C AS EFF_END_DT, USER as LS_UPDT_BY_NME, SYSDATE AS LS_UPDT_DT, :D AS JOB_NME, 1000 as JOB_RUN_ID, :E AS GL_EXCL_FLG  FROM FDP.CRT_EVNT_BASED_TR A WHERE A.PRCSSNG_DT = :F AND A.REC_STA = :G AND A.SRC_SYS_ID = :H AND A.SRV_CDE NOT IN (SELECT B.SRV_CDE FROM FDP.XREF_EVNT_REFNCE B WHERE A.SRC_SYS_ID = B.SRC_SYS_ID)';
--        EXECUTE IMMEDIATE V_STMT USING V_SRC_SYS_ID,'01-JAN-1900','31-DEC-9999','UI_ENTRY','N',V_PRCSSNG_DT,'SYSTEM APPROVED',V_SRC_SYS_ID;
--        DBMS_OUTPUT.PUT_LINE(V_STMT);
        IF V_SRC_SYS_ID = '122' 
        THEN
            INSERT INTO FDP.XREF_EVNT_REFNCE (SRC_SYS_ID, SRV_CDE, EFF_STRT_DT, EFF_END_DT, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, GL_EXCL_FLG,PL_CATEGORY,CURRENCY,SEGMENT,SRV_CDE_DESC) SELECT DISTINCT V_SRC_SYS_ID as SRC_SYS_ID, TRIM(A.SRV_CDE),'01-JAN-1900' AS EFF_STRT_DT, '31-DEC-9999' AS EFF_END_DT, USER as LS_UPDT_BY_NME, SYSDATE AS LS_UPDT_DT, 'ETL_ENTRY' AS JOB_NME, 1000 as JOB_RUN_ID, 'N' AS GL_EXCL_FLG,A.PL_CATEGORY,A.CURNCY_CDE,A.SEGMENT,A.SRV_CDE_DESC  FROM (SELECT T1.*,T2.DESCRIPTION as SRV_CDE_DESC FROM FDP.CRT_EVNT_BASED_TR T1 LEFT OUTER JOIN FDP_STG.STG_ECOMM_ACT_FEE_REF T2 on T1.SRV_CDE = T2.FEE_REF_ID) A WHERE A.PRCSSNG_DT = V_PRCSSNG_DT AND A.REC_STA = 'SYSTEM APPROVED' AND A.SRC_SYS_ID = V_SRC_SYS_ID AND (A.SRV_CDE,A.PL_CATEGORY,A.CURNCY_CDE,A.SEGMENT) NOT IN (SELECT B.SRV_CDE, B.PL_CATEGORY,DECODE(B.CURRENCY,'ALL',A.CURNCY_CDE,B.CURRENCY), B.SEGMENT FROM FDP.XREF_EVNT_REFNCE B WHERE A.SRC_SYS_ID = B.SRC_SYS_ID);
        ELSIF V_SRC_SYS_ID = '116' 
        THEN
            INSERT INTO FDP.XREF_EVNT_REFNCE (SRC_SYS_ID, SRV_CDE, EFF_STRT_DT, EFF_END_DT, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, GL_EXCL_FLG,PL_CATEGORY,CURRENCY,SEGMENT,SRV_CDE_DESC) SELECT DISTINCT V_SRC_SYS_ID as SRC_SYS_ID, TRIM(A.SRV_CDE),'01-JAN-1900' AS EFF_STRT_DT, '31-DEC-9999' AS EFF_END_DT, USER as LS_UPDT_BY_NME, SYSDATE AS LS_UPDT_DT, 'ETL_ENTRY' AS JOB_NME, 1000 as JOB_RUN_ID, 'N' AS GL_EXCL_FLG,A.PL_CATEGORY,A.CURNCY_CDE,A.SEGMENT,A.SRV_CDE_DESC  FROM (SELECT T1.*,T2.SERV_CD_DESC as SRV_CDE_DESC FROM FDP.CRT_EVNT_BASED_TR T1 LEFT OUTER JOIN FDP_STG.STG_XAA_XAD300_BCAASDT T2 on T1.SRV_CDE = REPLACE(T2.SERV_CD,'.','')) A WHERE A.PRCSSNG_DT = V_PRCSSNG_DT AND A.REC_STA = 'SYSTEM APPROVED' AND A.SRC_SYS_ID = V_SRC_SYS_ID AND (A.SRV_CDE,A.PL_CATEGORY,A.CURNCY_CDE,A.SEGMENT) NOT IN (SELECT B.SRV_CDE, B.PL_CATEGORY,DECODE(B.CURRENCY,'ALL',A.CURNCY_CDE,B.CURRENCY), B.SEGMENT FROM FDP.XREF_EVNT_REFNCE B WHERE A.SRC_SYS_ID = B.SRC_SYS_ID);
        ELSIF V_SRC_SYS_ID = '110'
        THEN
            INSERT INTO FDP.XREF_EVNT_REFNCE (SRC_SYS_ID, SRV_CDE, EFF_STRT_DT, EFF_END_DT, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, GL_EXCL_FLG,PL_CATEGORY,CURRENCY,SEGMENT) SELECT DISTINCT V_SRC_SYS_ID as SRC_SYS_ID, TRIM(A.SRV_CDE),'01-JAN-1900' AS EFF_STRT_DT, '31-DEC-9999' AS EFF_END_DT, USER as LS_UPDT_BY_NME, SYSDATE AS LS_UPDT_DT, 'ETL_ENTRY' AS JOB_NME, 1000 as JOB_RUN_ID, 'N' AS GL_EXCL_FLG,A.PL_CATEGORY,A.CURNCY_CDE,A.SEGMENT  FROM (SELECT * FROM FDP.CRT_EVNT_BASED_TR T1) A WHERE A.PRCSSNG_DT = V_PRCSSNG_DT AND A.REC_STA = 'SYSTEM APPROVED' AND A.SRC_SYS_ID = V_SRC_SYS_ID AND (A.SRV_CDE,A.PL_CATEGORY,A.CURNCY_CDE,A.SEGMENT) NOT IN (SELECT B.SRV_CDE, B.PL_CATEGORY,DECODE(B.CURRENCY,'ALL',A.CURNCY_CDE,B.CURRENCY), B.SEGMENT FROM FDP.XREF_EVNT_REFNCE B WHERE A.SRC_SYS_ID = B.SRC_SYS_ID);
        END IF;
        DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT || ' ROWS INSERTED IN EVENT REFERENCE TABLE');
    --------------------**Changed --Deleting records from Certified table-----------------------------------------------
        V_STMT := 'DELETE FROM FDP.CRT_EVNT_BASED_TR WHERE SRC_SYS_ID = :F and (BUSNSS_HK,PRCSSNG_DT) IN (SELECT BUSNSS_HK,PRCSSNG_DT  FROM FDP.TMP_CRT_EVNT_BASED_TR WHERE JOB_NME = :I)';
        EXECUTE IMMEDIATE V_STMT using V_SRC_SYS_ID, V_JOB_NME;
        DBMS_OUTPUT.PUT_LINE('STEP 5: RECORDS FROM CRT TABLE DELETED');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',5,'RECORDS FROM CRT TABLE DELETED',SYSDATE);
     --------------------Inserting records from Certified table from the temp table-----------------------------------------------
        V_STMT := 'INSERT INTO FDP.CRT_EVNT_BASED_TR (BUSNSS_HK, ENTY_ID, SRC_SYS_ID, PRCSSNG_DT, BILL_ID, BILL_DT, BILL_CMPL_DT, BILL_RPT_MO, BILL_CYC_CDE, BILL_STA, SRC_CST_CNTR, SRV_CDE, SRV_TYP_CDE, SRV_SUBTYP_CDE, SRV_GRP_CDE, PRD_GRP_LVL1_CDE, PRD_GRP_LVL2_CDE, ACCT_TYP, CUST_ID, FT_ID, SLS_TR_CNT, MNTRY_AMT, OVRD_FLG_VAL, OVRD_MIN_FEE, SLS_TAX_FLG, INV_PRNT_FLG, SLS_VOL, RTRN_AMT, RTRN_TR_CNT, INTRCHG_RVNU_AMT, ADJ_TYP, ADJ_AMT, ADJ_DT, INTRCHG_VOL, INTRCHG_EXP, SLS_TAX, CNTY_TAX, CITY_TAX, DIST_TAX, AREA_TAX_ID, JE_CATEGORY, BILL_BY_SRCHRG_EVNT_VOL, BILL_BY_SRCHRG_TR_CNT, BILL_BY_TR_CNT, BILL_BY_PRCNT_VOL, NTWK_ID, FEE_TYP, CURNCY_CDE, CNVRSN_DT, CNVRSN_RT, FUTR1, FUTR2, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, REC_STA, ERR_FLG, ERR_CDE, GL_EXCL_FLG, SENT_TO_BDA_FLG, FINCL_TR_HK, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, FI_FLG, GL_REV_BNK_NUM, CRD_TYP, CHRG_TYP, ASSMNT_BILLED_AMT, TES_REV_AMT, ROUNDING_REV, PRCSSNG_FEE_PRCT_VOL, PRCSSNG_FEE_UNIT_TR, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY) SELECT BUSNSS_HK, ENTY_ID, SRC_SYS_ID, PRCSSNG_DT, BILL_ID, BILL_DT, BILL_CMPL_DT, BILL_RPT_MO, BILL_CYC_CDE, BILL_STA, SRC_CST_CNTR, SRV_CDE, SRV_TYP_CDE, SRV_SUBTYP_CDE, SRV_GRP_CDE, PRD_GRP_LVL1_CDE, PRD_GRP_LVL2_CDE, ACCT_TYP, CUST_ID, FT_ID, SLS_TR_CNT, MNTRY_AMT, OVRD_FLG_VAL, OVRD_MIN_FEE, SLS_TAX_FLG, INV_PRNT_FLG, SLS_VOL, RTRN_AMT, RTRN_TR_CNT, INTRCHG_RVNU_AMT, ADJ_TYP, ADJ_AMT, ADJ_DT, INTRCHG_VOL, INTRCHG_EXP, SLS_TAX, CNTY_TAX, CITY_TAX, DIST_TAX, AREA_TAX_ID, JE_CATEGORY, BILL_BY_SRCHRG_EVNT_VOL, BILL_BY_SRCHRG_TR_CNT, BILL_BY_TR_CNT, BILL_BY_PRCNT_VOL, NTWK_ID, FEE_TYP, CURNCY_CDE, CNVRSN_DT, CNVRSN_RT, FUTR1, FUTR2, ATTRIBUTE1, ATTRIBUTE2, ATTRIBUTE3, ATTRIBUTE4, ATTRIBUTE5, ATTRIBUTE6, ATTRIBUTE7, ATTRIBUTE8, REC_STA, ERR_FLG, ERR_CDE, GL_EXCL_FLG, SENT_TO_BDA_FLG, FINCL_TR_HK, LS_UPDT_BY_NME, LS_UPDT_DT, JOB_NME, JOB_RUN_ID, FI_FLG, GL_REV_BNK_NUM, CRD_TYP, CHRG_TYP, ASSMNT_BILLED_AMT, TES_REV_AMT, ROUNDING_REV, PRCSSNG_FEE_PRCT_VOL, PRCSSNG_FEE_UNIT_TR, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY FROM FDP.TMP_CRT_EVNT_BASED_TR WHERE JOB_NME = :K';
        EXECUTE IMMEDIATE V_STMT using V_JOB_NME;
        DBMS_OUTPUT.PUT_LINE('STEP 6: RECORDS INTO CRT TABLE INSERTED');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',6,'RECORDS INTO CRT TABLE INSERTED',SYSDATE);
    --------------------**Changed --Deleting records from the Error table for the previous dates for the same rec_sta------------------------------------
        V_STMT := 'DELETE FROM FDP_UI.ERR_EVNT_BASED_TR WHERE SRC_SYS_ID = :F and (BUSNSS_HK,PRCSSNG_DT) IN (SELECT BUSNSS_HK,PRCSSNG_DT  FROM FDP.TMP_CRT_EVNT_BASED_TR WHERE JOB_NME = :I) and rec_sta = :L ';
        EXECUTE IMMEDIATE V_STMT using V_SRC_SYS_ID,  V_JOB_NME, V_REC_STA_NEW;
        DBMS_OUTPUT.PUT_LINE('STEP 7: RECORDS FROM ERR TABLE DELETED');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',7,'RECORDS FROM ERR TABLE DELETED',SYSDATE);
    --------------------Inserting records from Error table from the temp table-----------------------------------------------
        V_STMT := 'INSERT INTO FDP_UI.ERR_EVNT_BASED_TR (BUSNSS_HK,ENTY_ID,SRC_SYS_ID,PRCSSNG_DT,BILL_ID,BILL_DT,BILL_CMPL_DT,BILL_RPT_MO,BILL_CYC_CDE,BILL_STA,SRC_CST_CNTR,SRV_CDE,SRV_TYP_CDE,SRV_SUBTYP_CDE,SRV_GRP_CDE,PRD_GRP_LVL1_CDE,PRD_GRP_LVL2_CDE,ACCT_TYP,CUST_ID,FT_ID,SLS_TR_CNT,MNTRY_AMT,OVRD_FLG_VAL,OVRD_MIN_FEE,SLS_TAX_FLG,INV_PRNT_FLG,SLS_VOL,RTRN_AMT,RTRN_TR_CNT,INTRCHG_RVNU_AMT,ADJ_TYP,ADJ_AMT,ADJ_DT,INTRCHG_VOL,INTRCHG_EXP,SLS_TAX,CNTY_TAX,CITY_TAX,DIST_TAX,AREA_TAX_ID,JE_CATEGORY,BILL_BY_SRCHRG_EVNT_VOL,BILL_BY_SRCHRG_TR_CNT,BILL_BY_TR_CNT,BILL_BY_PRCNT_VOL,NTWK_ID,FEE_TYP,CURNCY_CDE,CNVRSN_DT,CNVRSN_RT,FUTR1,FUTR2,ATTRIBUTE1,ATTRIBUTE2,ATTRIBUTE3,ATTRIBUTE4,ATTRIBUTE5,ATTRIBUTE6,ATTRIBUTE7,ATTRIBUTE8,REC_STA,ERR_FLG,ERR_CDE,GL_EXCL_FLG,SENT_TO_BDA_FLG,FINCL_TR_HK,LS_UPDT_BY_NME,LS_UPDT_DT,JOB_NME,JOB_RUN_ID,FI_FLG, GL_REV_BNK_NUM, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY) select    BUSNSS_HK,    ENTY_ID,    SRC_SYS_ID,    PRCSSNG_DT,    BILL_ID,    BILL_DT,    BILL_CMPL_DT,    BILL_RPT_MO,    BILL_CYC_CDE,    BILL_STA,    SRC_CST_CNTR,    SRV_CDE,    SRV_TYP_CDE,    SRV_SUBTYP_CDE,    SRV_GRP_CDE,    PRD_GRP_LVL1_CDE,    PRD_GRP_LVL2_CDE,    ACCT_TYP,    CUST_ID,    FT_ID,    SLS_TR_CNT,    MNTRY_AMT,    OVRD_FLG_VAL,    OVRD_MIN_FEE,    SLS_TAX_FLG,    INV_PRNT_FLG,    SLS_VOL,    RTRN_AMT,    RTRN_TR_CNT,    INTRCHG_RVNU_AMT,    ADJ_TYP,    ADJ_AMT,    ADJ_DT,    INTRCHG_VOL,    INTRCHG_EXP,    SLS_TAX,    CNTY_TAX,    CITY_TAX,    DIST_TAX,    AREA_TAX_ID,    JE_CATEGORY,    BILL_BY_SRCHRG_EVNT_VOL,    BILL_BY_SRCHRG_TR_CNT,    BILL_BY_TR_CNT,    BILL_BY_PRCNT_VOL,    NTWK_ID,    FEE_TYP,    CURNCY_CDE,    CNVRSN_DT,    CNVRSN_RT,    FUTR1,    FUTR2,    ATTRIBUTE1,    ATTRIBUTE2,    ATTRIBUTE3,    ATTRIBUTE4,    ATTRIBUTE5,    ATTRIBUTE6,    ATTRIBUTE7,    ATTRIBUTE8,    REC_STA,    ERR_FLG,    ERR_CDE,    GL_EXCL_FLG,    SENT_TO_BDA_FLG,    FINCL_TR_HK,    LS_UPDT_BY_NME,    LS_UPDT_DT,    JOB_NME,    JOB_RUN_ID,    FI_FLG,    GL_REV_BNK_NUM, CIS_DIVISION,ACCT_NBR_TYPE_CD,ACCOUNT,BILLING_SYSTEM,CUT_OFF,DSCNT_AMT,D_UNT_PRC_TYP_CD,ENTRY_NUM,FILE_NAME,FT_TYP_FLG,GL_ACCT,INTR_CO,ISC,ISO,RVRSL_DT,STG_BUSNSS_HK,SEGMENT,PL_CATEGORY from    FDP.TMP_CRT_EVNT_BASED_TR TBL2 WHERE JOB_NME = :K AND ERR_CDE IS NOT NULL';
        EXECUTE IMMEDIATE V_STMT using V_JOB_NME;
        DBMS_OUTPUT.PUT_LINE('STEP 8: RECORDS INTO ERR TABLE INSERTED');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',8,'RECORDS INTO ERR TABLE INSERTED',SYSDATE);
    --------------------End of Procedure-----------------------------------------------
        DBMS_OUTPUT.PUT_LINE('STEP 9: PROCEDURE ENDED');
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',9,'PROCEDURE ENDED',SYSDATE);
         commit;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        V_ERROR := SQLERRM;
        DB_LOG_ENTRY(V_JOB_ID,'SP_CRT_DQ_RULES_CHECK',2,'PROC FAILED SRC:'||V_SRC_SYS_ID||';ERROR: ' || V_ERROR,SYSDATE);
        COMMIT;
        RAISE_APPLICATION_ERROR(-20000, 'PL/SQL Procedure Failed. Please see the FDP.DB_LOG_STA_TBL Table for more details!!!');
END;